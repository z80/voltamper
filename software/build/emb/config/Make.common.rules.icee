# **********************************************************************
#
# Copyright (c) 2003-2008 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

SHELL			= /bin/sh
VERSION			= 1.3.0
SOVERSION		= 13

INSTALL			= cp -fp
INSTALL_PROGRAM		= ${INSTALL}
INSTALL_LIBRARY		= ${INSTALL}
INSTALL_DATA		= ${INSTALL}

OBJEXT			= .o

UNAME			:= $(shell uname)
MACHINE_TYPE		:= $(shell uname -m)

#
# Ensure ice_language has been set by the file that includes this one.
#
ifndef ice_language
$(error ice_language must be defined)
endif

ifeq ($(USE_BIN_DIST),yes)
ice_bin_dist = 1
endif

ifeq ($(UNAME),Linux)
   ifeq ($(MACHINE_TYPE),x86_64)
      lp64suffix	= 64
      ifeq ($(LP64),)
          LP64      	= yes
      endif
   endif
endif

ifeq ($(LP64),yes)
    libsubdir		  := lib$(lp64suffix)
    binsubdir		  := bin$(lp64binsuffix)
else
    libsubdir		  := lib
    binsubdir		  := bin
endif

#
# The following variables might also be defined:
# 
# - slice_translator: the name of the slice translator required for the build.
#   Setting this variable is required when building source trees other than the
#   the source distribution (e.g.: the demo sources).
#                  
# - ice_require_cpp: define this variable to check for the presence of the C++
#   dev kit and check for the existence of the include/Ice/Config.h header.
#

#
# First, check if we're building a source distribution. 
#
# If building from a source distribution, ice_dir is defined to the
# top-level directory of the source distribution and ice_cpp_dir is
# defined to the directory containing the C++ binaries and headers to
# use to build the sources.
#
ifndef ice_bin_dist
    ifeq ($(shell test -d $(top_srcdir)/../$(ice_language) && echo 0),0)
        ice_dir = $(top_srcdir)/..
        ice_src_dist = 1

        #
        # When building a source distribution, if ICEE_HOME is specified, it takes precedence over 
        # the source tree for building the language mappings. For example, this can be used to 
        # build the Python language mapping using the translators from the distribution specified
        # by ICEE_HOME.
        #
	ifneq ($(ICEE_HOME),)
	    ifdef slice_translator
		ifneq ($(shell test -f $(ICEE_HOME)/$(binsubdir)/$(slice_translator) && echo 0), 0)
$(error Unable to find $(slice_translator) in $(ICEE_HOME)/$(binsubdir), please verify ICEE_HOME is properly configured and Ice is correctly installed.)
		endif
		ifeq ($(shell test -f $(ice_dir)/cpp/bin/$(slice_translator) && echo 0), 0)
$(warning Found $(slice_translator) in both ICEE_HOME/bin and $(ice_dir)/cpp/bin, ICEE_HOME/bin/$(slice_translator) will be used!)
		endif
		ice_cpp_dir = $(ICEE_HOME)
	    else
$(warning Ignoring ICEE_HOME environment variable to build current source tree.)
		ice_cpp_dir = $(ice_dir)/cpp
	    endif
	else
	    ice_cpp_dir = $(ice_dir)/cpp
	endif
    endif
endif

#
# Then, check if we're building against a binary distribution.
#
ifndef ice_src_dist

    ifndef slice_translator
$(error slice_translator must be defined)
    endif

    ifneq ($(ICEE_HOME),)
        ifneq ($(shell test -f $(ICEE_HOME)/$(binsubdir)/$(slice_translator) && echo 0), 0)
$(error Unable to find $(slice_translator) in $(ICEE_HOME)/$(binsubdir), please verify ICEE_HOME is properly configured and Ice is correctly installed.)
        endif
        ice_dir = $(ICEE_HOME)
    else
        ifeq ($(shell test -f $(top_srcdir)/bin/$(slice_translator) && echo 0), 0)
            ice_dir = $(top_srcdir)
        else 
	    ifeq ($(shell test -f /usr/bin/$(slice_translator) && echo 0), 0)
	        ice_dir = /usr
	        ifeq ($(shell test -f /opt/IceE-$(VERSION)/bin/$(slice_translator) && echo 0), 0)
$(warning Found $(slice_translator) in both /usr/bin and /opt/IceE-$(VERSION)/bin, /usr/bin/$(slice_translator) will be used!)
		endif
	    else
	        ifeq ($(shell test -f /opt/IceE-$(VERSION)/$(binsubdir)/$(slice_translator) && echo 0), 0)
	            ice_dir = /opt/IceE-$(VERSION)
		endif
	    endif
        endif
    endif

    ifndef ice_dir
$(error Unable to find a valid Ice-E distribution, please verify ICEE_HOME is properly configured and Ice is correctly installed.)
    endif
    ice_bin_dist = 1
endif

#
# Clear the embedded runpath prefix if building against RPM distribution.
#
ifeq ($(ice_dir), /usr)
    embedded_runpath_prefix =
endif

#
# Set slicedir to the path of the directory containing the Slice files.
#
ifeq ($(ice_dir), /usr)
    slicedir = /usr/share/IceE-$(VERSION)/slice
else
    slicedir = $(ice_dir)/slice
endif

install_slicedir	= $(prefix)/slice

#
# Set environment variables for the Slice translator.
#
ifneq ($(ice_dir), /usr)
    ifdef ice_src_dist
	ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
	    ice_lib_dir = $(ice_cpp_dir)/lib
	else
            ice_lib_dir = $(ice_cpp_dir)/$(libsubdir)
	endif
    else
        ice_lib_dir = $(ice_dir)/$(libsubdir)
    endif

    ifeq ($(UNAME),Linux)
        export LD_LIBRARY_PATH := $(ice_lib_dir):$(LD_LIBRARY_PATH)
    endif

    ifeq ($(UNAME),Darwin)
        export DYLD_LIBRARY_PATH := $(ice_lib_dir):$(DYLD_LIBRARY_PATH)
    endif
endif


#
# Default functions for shared library names
#

ifeq ($(mklibfilename),)
    mklibfilename	= $(if $(2),lib$(1).so.$(2),lib$(1).so)
endif

ifeq ($(mksoname),)
    mksoname		= $(if $(2),lib$(1).so.$(2),lib$(1).so)
endif

ifeq ($(mklibname),)
    ifeq ($(STATICLIBS),yes)
	mklibname	= lib$(1).a
    else
	mklibname	= lib$(1).so
    endif
endif

ifndef mklibtargets
    ifeq ($(STATICLIBS),yes)
	mklibtargets	= $(3)
    else
	mklibtargets	= $(1) $(2) $(3)
    endif
endif

ifeq ($(installlib),)
    ifeq ($(STATICLIBS),yes)
	installlib	= $(INSTALL) $(2)/$(5) $(1); \
			  chmod a+rx $(1)/$(5) 
    else
	installlib	= $(INSTALL) $(2)/$(3) $(1); \
			  rm -f $(1)/$(4); ln -s $(3) $(1)/$(4); \
			  rm -f $(1)/$(5); ln -s $(4) $(1)/$(5); \
			  chmod a+rx $(1)/$(3) 
    endif
endif

ifeq ($(installdata),)
    installdata		= $(INSTALL_DATA) $(1) $(2); \
			  chmod a+r $(2)/$(notdir $(1))
endif

ifeq ($(installprogram),)
    installprogram	= $(INSTALL_PROGRAM) $(1) $(2); \
			  chmod a+rx $(2)/$(notdir $(1))
endif

ifeq ($(mkdir),)
    mkdir		= mkdir $(1) ; \
			  chmod a+rx $(1)
endif

all::

install-common::
	@if test ! -d $(prefix) ; \
	then \
	    echo "Creating $(prefix)..." ; \
	    $(call mkdir,$(prefix)) ; \
	fi

	@if test ! -d $(install_slicedir) ; \
	then \
	    echo "Creating $(install_slicedir)..." ; \
	    $(call mkdir,$(install_slicedir)) ; \
	    cd $(top_srcdir)/../slice ; \
	    for subdir in * ; \
	    do \
	        echo "Copying slice/$$subdir to $(install_slicedir)..." ; \
	        cp -fpr $$subdir $(install_slicedir) ; \
	    done ; \
        fi

	@if test ! -f $(prefix)/ICEE_LICENSE ; \
	then \
	    $(call installdata,$(top_srcdir)/../ICEE_LICENSE,$(prefix)) ; \
	fi

	@if test ! -f $(prefix)/LICENSE ; \
	then \
	    $(call installdata,$(top_srcdir)/../LICENSE,$(prefix)) ; \
	fi
